{"version":3,"sources":["Components/Navbar.js","Components/Textform.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","Navtitle","type","id","class","onClick","togglemode","for","Textform","useState","text","settext","heading","rows","value","onChange","event","target","placeholder","style","backgroundColor","color","up","toUpperCase","showalert","low","toLowerCase","newText","charAt","slice","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","split","length","Alert","alert","role","word","lower","capitalize","msg","defaultProps","abouttext","App","setmode","setalert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"4LAIe,SAASA,EAAOC,GAC7B,OACE,qBACEC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MADtE,SAGE,sBAAKD,UAAU,kBAAf,UACE,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,SACGH,EAAMI,WAET,wBACEH,UAAU,iBACVI,KAAK,SACL,iBAAe,WACf,iBAAe,0BACf,gBAAc,yBACd,gBAAc,QACd,aAAW,oBAPb,SASE,sBAAMJ,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACE,oBAAIL,UAAU,kCAAd,SACE,oBAAIM,MAAM,kBAAV,SACE,mBAAGA,MAAM,WAAWJ,KAAK,IAAzB,sBAKJ,sBAAMF,UAAU,SAAhB,SACE,sBACEA,UAAS,sCACQ,SAAfD,EAAME,KAAkB,QAAU,QAFtC,UAKE,uBACEK,MAAM,mBACNF,KAAK,WACLC,GAAG,yBACHE,QAASR,EAAMS,aAEjB,uBAAOF,MAAM,mBAAmBG,IAAI,yBAApC,2CC1CC,SAASC,EAASX,GAC/B,MAAwBY,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAuCA,OACE,qCACA,sBAAKb,UAAU,YAAf,UACE,6BAAKD,EAAMe,UACX,0BACEd,UAAU,eACVK,GAAG,QACHU,KAAK,IACLC,MAAOJ,EACPK,SA5Be,SAACC,GAClBL,EAAQK,EAAMC,OAAOH,QA4BnBI,YAAY,uBACZC,MAAO,CAACC,gBAAgC,UAAdvB,EAAME,KAAiB,QAAQ,UAAYsB,MAAsB,UAAdxB,EAAME,KAAiB,QAAQ,WAG9G,wBAAQD,UAAU,4BAA4BO,QAnD9B,SAACW,GACnB,IAAIM,EAAKZ,EAAKa,cAEdZ,EAAQW,GACRzB,EAAM2B,UAAU,8BAAgC,YA+C9C,kCAGA,wBAAQtB,KAAK,SAASJ,UAAU,uBAAuBO,QA/CvC,WAClB,IAAIoB,EAAMf,EAAKgB,cACff,EAAQc,GACR5B,EAAM2B,UAAU,8BAAgC,YA4C9C,kCAGA,wBAAQtB,KAAK,SAASJ,UAAU,uBAAuBO,QA5CpC,WACrBM,EAAQ,IACRd,EAAM2B,UAAU,eAAiB,YA0C/B,wBAGA,wBAAQtB,KAAK,SAASJ,UAAU,uBAAuBO,QArCxC,WAEjB,IACIsB,EADYjB,EAAKkB,OAAO,GACLL,cACvBZ,EAAQgB,EAAQjB,EAAKmB,MAAM,KAiCzB,mCAGA,wBAAQ3B,KAAK,SAASJ,UAAU,4BAA4BO,QAjC/C,WACf,IAAIK,EAAOoB,SAASC,eAAe,SACnCrB,EAAKsB,SACLtB,EAAKuB,kBAAkB,EAAI,MAC3BC,UAAUC,UAAUC,UAAU1B,EAAKI,OACnCjB,EAAM2B,UAAU,2BAA6B,YA4B3C,0BAKF,uBACA,sBAAK1B,UAAU,YAAf,UACI,mDACA,6CAAe,4BAAIY,EAAK2B,MAAM,KAAKC,SAAnC,cAAyD,4BAAI5B,EAAK4B,SAAlE,iBAEA,wCAAU,4BAAI,KAAQ5B,EAAK2B,MAAM,KAAKC,SAAtC,mCAEJ,uBACA,yCACA,4BAAI5B,EAAK4B,OAAO,EAAE5B,EAAK,kDACvB,0BCjFW,SAAS6B,EAAM1C,GAM5B,OACEA,EAAM2C,OAAS,sBAAK1C,UAAS,sBAAiBD,EAAM2C,MAAMtC,KAA7B,gCAAiEuC,KAAK,QAApF,UACb,iCANkB,SAACC,GACjB,IAAMC,EAAQD,EAAKhB,cACnB,OAAOiB,EAAMf,OAAO,GAAGL,cAAgBoB,EAAMd,MAAM,GAI5Ce,CAAW/C,EAAM2C,MAAMtC,QADnB,MACsCL,EAAM2C,MAAMK,OFmDrEjD,EAAOkD,aAAe,CACpB7C,SAAU,gBACV8C,UAAW,mBGQEC,MAzDf,WACE,MAAwBvC,mBAAS,SAAjC,mBAAOV,EAAP,KAAakD,EAAb,KACA,EAA0BxC,mBAAS,MAAnC,mBAAO+B,EAAP,KAAcU,EAAd,KAEI1B,EAAY,SAAC2B,EAASjD,GACxBgD,EAAS,CACPL,IAAMM,EACNjD,KAAOA,IAGTkD,YAAY,WACVF,EAAS,QACT,OAiBJ,OACE,qCAEE,cAACtD,EAAD,CAAQK,SAAW,YACX8C,UAAY,QACZhD,KAAQA,EACRO,WApBO,WACL,UAATP,GACDkD,EAAQ,QACRnB,SAASuB,KAAKlC,MAAMC,gBAAiB,UACrCU,SAASuB,KAAKlC,MAAME,MAAM,QAC1BG,EAAU,uBAAwB,aAGlCyB,EAAQ,SACRnB,SAASuB,KAAKlC,MAAMC,gBAAiB,QACrCU,SAASuB,KAAKlC,MAAME,MAAM,QAC1BG,EAAU,wBAAyB,eAWnC,cAACe,EAAD,CAAOC,MAAOA,IACd,qBAAK1C,UAAU,YAAf,SACA,cAACU,EAAD,CAAUgB,UAAWA,EAAWZ,QAAQ,kCAAkCb,KAAMA,UCzCvEuD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnC,SAASC,eAAe,SAM1BuB,K","file":"static/js/main.7f371617.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { a } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.Navtitle}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li class=\"nav-item active\">\r\n              <a class=\"nav-link\" href=\"#\">\r\n                Home \r\n              </a>\r\n            </li>\r\n          </ul>\r\n          <form className=\"d-flex\">\r\n            <div\r\n              className={`form-check form-switch text-${\r\n                props.mode === \"dark\" ? \"light\" : \"dark\"\r\n              }`}\r\n            >\r\n              <input\r\n                class=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckDefault\"\r\n                onClick={props.togglemode}\r\n              />\r\n              <label class=\"form-check-label\" for=\"flexSwitchCheckDefault\">\r\n                Enable dark mode\r\n              </label>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\n//this is to check props type are provided right or wrong\r\nNavbar.propTypes = {\r\n  Navtitle: PropTypes.string.isRequired,\r\n  abouttext: PropTypes.string,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  Navtitle: \"Title is here\",\r\n  abouttext: \"About Text Here\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Textform(props) {\r\n  const [text, settext] = useState(\"\");\r\n\r\n  let HandleUpclick = (event) => {\r\n    let up = text.toUpperCase() ;\r\n    //console.log(text.length);\r\n    settext(up);\r\n    props.showalert(\"Text converted to uppercase\" , \"success\")\r\n  };\r\n\r\n  let HandleDwclick = () => {\r\n    let low = text.toLowerCase() ;\r\n    settext(low);\r\n    props.showalert(\"Text converted to lowercase\" , \"success\")\r\n  };\r\n\r\n  let HandleClearclick = () =>{\r\n    settext(\"\");\r\n    props.showalert(\"Text Cleared\" , \"warning\")\r\n  }\r\n\r\n  let Handleonchange = (event) => {\r\n      settext(event.target.value)\r\n  }\r\n\r\n  // to capitalize the first character of any string\r\n  const capitalize = () => {\r\n        \r\n    let firstchar = text.charAt(0); // storing the first char of the string\r\n    let newText= firstchar.toUpperCase(); // converting that to uppercase\r\n    settext(newText+text.slice(1)); // printing it with rest excluding the first char by using slice\r\n\r\n}\r\n  let Handlecopy = ()=>{\r\n    let text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    text.setSelectionRange(0 , 9999);\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showalert(\"Text copied to clipboard\" , \"success\")\r\n  }\r\n  return (\r\n    <>\r\n    <div className=\"mb-3 my-3\">\r\n      <h1>{props.heading}</h1>\r\n      <textarea\r\n        className=\"form-control\"\r\n        id=\"myBox\"\r\n        rows=\"8\"\r\n        value={text}\r\n        onChange={Handleonchange}\r\n        placeholder=\"Enter your text here\"\r\n        style={{backgroundColor : props.mode ===\"light\" ?\"white\":\"#212529\" , color : props.mode ===\"light\" ?\"black\":\"white\"}}\r\n      ></textarea>\r\n\r\n      <button className=\"btn btn-primary my-3 mx-1\" onClick={HandleUpclick}>\r\n        Convert to Uppercase\r\n      </button>\r\n      <button type=\"button\" className=\"btn btn-primary mx-1\" onClick={HandleDwclick}>\r\n      Convert to Lowercase\r\n      </button>\r\n      <button type=\"button\" className=\"btn btn-primary mx-1\" onClick={HandleClearclick}>\r\n      Clear-Text\r\n      </button>\r\n      <button type=\"button\" className=\"btn btn-primary mx-1\" onClick={capitalize}>\r\n      Capitalize 1st letter \r\n      </button>\r\n      <button type=\"button\" className=\"btn btn-primary mx-1 my-2\" onClick={Handlecopy}>\r\n      Copy text\r\n      </button>\r\n\r\n    </div>\r\n    <hr/>\r\n    <div className=\"container\">\r\n        <h2>Your Test Summary</h2>\r\n        <p>text having <b>{text.split(\" \").length}</b> words and <b>{text.length}</b> characters</p>\r\n        \r\n        <p>approx <b>{0.008 * text.split(\" \").length}</b> minutes required to read </p>\r\n    </div>\r\n    <hr/>\r\n    <h2>Preview</h2>\r\n    <p>{text.length>0?text:\"Enter something in textarea to preview here  \"}</p>\r\n    <hr/>\r\n    </>\r\n  )\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize  = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n      <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\n// import About from \"./Components/About\";\nimport Navbar from \"./Components/Navbar\";\nimport Textform from \"./Components/Textform\";\nimport React, { useState } from 'react'\nimport Alert from \"./Components/Alert\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\");\n  const [alert, setalert] = useState(null);\n\n  let showalert = (message ,type)=>{\n    setalert({\n      msg : message,\n      type : type \n    })\n\n    setTimeout( () =>{\n      setalert(null)\n    },1500)\n  }\n\n  const togglemode = () =>{\n    if(mode === \"light\"){\n      setmode(\"dark\");\n      document.body.style.backgroundColor= \"#121212\";\n      document.body.style.color=\"white\";\n      showalert(\"Dark mode is enabled\" ,\"success\");\n    }\n    else{\n      setmode(\"light\");\n      document.body.style.backgroundColor= \"white\";\n      document.body.style.color=\"black\";\n      showalert(\"Light mode is enabled\" ,\"success\");\n    }\n  }\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar Navtitle = \"TextUtils\" \n              abouttext = \"About\"\n              mode = {mode}\n              togglemode = {togglemode}\n      />\n      <Alert alert={alert}/>\n      <div className=\"container\">\n      <Textform showalert={showalert} heading=\"Enter the text to analyze below\" mode={mode}/>\n      </div>\n{/*<div className=\"container\">\n       <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n            <Textform showalert={showalert} heading=\"Enter the text to analyze below\" mode={mode}/>\n          </Route>\n        </Switch>\n      </div>\n      \n    </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}